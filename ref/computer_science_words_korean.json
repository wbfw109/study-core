[
  {
    "word_name": ": Data Structure",
    "description": [],
    "children": [
      {
        "word_name": ": (ADT)",
        "description": [
          "Abstract data type. 값과 연산자의 집합에 의해 논리적 동작이 정의되는 객체의 클래스."
        ],
        "children": [
          {
            "word_name": ": Collection",
            "description": [
              "어떤 문제 해결를 해결하는 데에 공통적으로 통제된 방식으로 함께 운영되어야 하는 가변적 데이터 항목들의 그룹."
            ],
            "children": []
          },
          {
            "word_name": ": Container",
            "description": [
              "개체의 인스턴스가 다른 객체의 collection 인 (class | data structure)."
            ],
            "children": []
          }
        ]
      },
      {
        "word_name": ": Opaque Data Type",
        "description": [
          "Interface 에서 구체적인 데이터 구조가 정의되지 않은 Data type 으로, 추상적 데이터 타입으로서 자주 이용됨.",
          "✖️ e.g. of Opaque Pointer: (C, Python) 에서 파일 입출력을 위한 스트림을 표현하는 파일에 대한 포인터.",
          "✖️ e.g. of Opaque Data Type: Handle."
        ],
        "children": [
          {
            "word_name": ": Handle",
            "description": [
              "✖️ e.g. of Resource handle: PIDs, File descriptors, Network socket, DB connection.",
              "Application 이 (DB | OS) 와 같은 다른 시스템에서 관리되는 객체나 메모리블록을 참조할 때 사용되는 리소스에 대한 추상적 참조."
            ],
            "children": []
          }
        ]
      },
      {
        "word_name": ": First-class citizen",
        "description": [
          "주어진 프로그래밍 언어에서 다른 모든 개체들이 일반적으로 사용가능한 연산을 지원하는 개체."
        ],
        "children": []
      },
      {
        "word_name": ": Continuation",
        "description": [
          "프로그램의 제어 상태에 대한 추상적 표현으로, 이를 구체화한 것에는 Exception, Coroutine, Generator 등이 존재.",
          "🔪 First-Class Continuation: 어느 지점의 실행 상태를 저장하고 이후 다시 해당 지점으로 돌아갈 수 있는 기능을 제공하는 구조."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": ": evaluation",
    "description": [],
    "children": [
      {
        "word_name": "🆚: statement, expression",
        "description": [
          "명령형 프로그래밍에서 statement 는 수행할 작업을 표현하는 구문 단위이고, expression 은 어떤 값을 결정하기 위해 평가될 수 있는 구문 개체."
        ],
        "children": []
      },
      {
        "word_name": ": fall-through",
        "description": [
          "일부 프로그래밍 구조에서의 서브루틴 실행에서 명시적으로 리다이렉팅되지 않는 한, 실행이 목록의 다음 조건으로 전달되는 상황.",
          "✖️ e.g.: C switch statement in language, exception propagate to caller."
        ],
        "children": []
      },
      {
        "word_name": ": partial",
        "description": ["알고리즘이 종료되었을때만 유지하고 있는 속성."],
        "children": []
      },
      {
        "word_name": ": mixin",
        "description": [
          "OOP 에서 다른 클래스의 부모클래스를 가지지 않고, 다른 클래스에서 사용하기 위한 메서드를 포함하는 클래스로, 믹스인은 상속보다는 포함되었다고 표현함."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": ": OS",
    "description": [],
    "children": [
      {
        "word_name": "🆚: Process, Thread",
        "description": [
          "🔪 process: 하나 이상의 쓰레드에 의해 실행되고 있는 프로그램의 인스턴스.",
          "🔪 thread: 스케줄러에 의해 독립적으로 관리될 수 있는, 가장 작은, 일련의 프로그램 명령어.",
          "　",
          "➖ main difference: 주어진 프로세스에서 멀티쓰레드는 메모리와 같은 리소스를 공유하며 동시적으로 실행되지만, 다른 프로세스들 간에는 이러한 리소스를 공유하지 않음."
        ],
        "children": [
          {
            "word_name": ": Context switch",
            "description": [
              "하나의 쓰레드나 프로세스의 상태를 저장하여 나중에 실행 포인트를 복원하고 재개할 수 있도록 하고, 이전에 저장된 다른 상태의 것을 복원하는 프로세스.",
              "주로 선점형 멀티태스킹 시스템에서나, 저장장치에 대한 인터럽트를 핸들링을 할 때 발생함."
            ],
            "children": []
          }
        ]
      },
      {
        "word_name": ": function, subroutine, method",
        "description": [
          "하나의 단위로 패키지되어 특정 작업을 수행하는 일련의 프로그램 명령어"
        ],
        "children": []
      },
      {
        "word_name": ": Coroutine",
        "description": [
          "서브루틴의 실행을 일시중지하고 재개할수 있도록 하는 비선점적 멀티태스킹을 위한 서브루틴을 일반화하는 용어."
        ],
        "children": [
          {
            "word_name": ": yield",
            "description": [
              "프로그램에서 멀티쓰레딩 동안에 프로세서가 강제로 현재 실행중인 쓰레드의 제어를 포기하게 하고",
              ", 이를 동일한 스케줄링 우선순위를 가지도록 하여 프로세스 실행 큐의 끝으로 보내는 행위."
            ],
            "children": []
          },
          {
            "word_name": ": trampoline",
            "description": [
              "Coroutine 스케줄러라고도 불리며, 코루틴들이 호출하길 원하는 다른 코루틴을 yield 하여 호출하는 코루틴들을 말함."
            ],
            "children": []
          }
        ]
      },
      {
        "word_name": ": Word",
        "description": [
          "특정 프로세서의 디자인에서 하나의 단위로서 처리되는 고정된 크기의 데이터"
        ],
        "children": []
      },
      {
        "word_name": ": Endianness",
        "description": [
          "메모리에서 워드의 바이트 순서를 지칭하는 말로, 크게 빅 엔디안 시스템과 리틀 엔디안 표현방법으로 나누어짐.",
          "🔪 Big-Endian (BE): 최상위 바이트를 가장 작은 메모리 주소에 저장하고, 최하위 바이트를 가장 큰 메모리 주소에 저장.",
          "🔪 Little-Endian (LE): 최상위 바이트를 가장 큰 메모리 주소에 저장하고, 최하위 바이트를 가장 작은 메모리 주소에 저장",
          "　",
          "📝 Network byte order 는 Big-Endian 방식이고, 일반적인 x86, AMD64 프로세서는 Little-endian 방식을 사용하기 때문에, 통신 시에 목적에 따라 적절한 변환이 필요할 수 있음."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": ": Database",
    "description": [],
    "children": [
      {
        "word_name": ": Cursor",
        "description": [
          "DB 의 Record 들을 순회할 수 있도록 하는 메커니즘을 가진 객체로, Query 에 대한 결과 집합을 한 번에 조작할 수 있께 함."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": ": Telecommunication",
    "description": [],
    "children": [
      {
        "word_name": ": Terminal",
        "description": [
          "통신링크가 끝나는 장치이며, 신호가 네트워크에 들어가거나 나가는 지점.",
          "✖️ e.g.: device (computer terminal, printer, fax)."
        ],
        "children": []
      },
      {
        "word_name": ": Node",
        "description": [
          "통신 종단점이나 라우팅 재분배 포인트를 의미하며, 정확한 정의는 참조하고 있는 프로토콜 계층과 네트워크에 따라 다름."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": "🔪: Network",
    "description": [],
    "children": [
      {
        "word_name": ": Address Family identifiers",
        "description": [
          "개별 주소의 사용이 모호할 수 있는 상황에서의 네트워크 통신을 위한 식별자 그룹."
        ],
        "children": []
      },
      {
        "word_name": ": Domain name",
        "description": [
          "인터넷 내에서 관리 자율성, 권한 또는 통제의 영역을 식별하는 문자열."
        ],
        "children": [
          {
            "word_name": ": Domain name system (DNS)",
            "description": [
              "인터넷이나 다른 IP 네트워크에서의 컴퓨터, 서비스와 같은 리소스에 대한 계층적이고 분산적인 이름 지정 시스템.",
              "주로 RR 중 (A, AAAA) Record 의 기능인 도메인 이름을 IP 주소로 해석하는 역할을 하거나, CNAME Record기능인 Domain name 의 별칭을 매핑하는 역할을 함."
            ],
            "children": []
          }
        ]
      },
      {
        "word_name": ": Routing",
        "description": [
          "네트워크 상에서 최적의 트래픽의 경로를 선택하는 프로세스."
        ],
        "children": []
      },
      {
        "word_name": ": Message Oriented Middleware (MOM)",
        "description": [
          "분산 시스템 사이에서 메시지 송신, 수신을 지원하는 하드웨어 인프라나 소프트웨어.",
          "Application 인터페이스를 사용하여, 독립적으로 개발됐거나 다른 네트워크 플랫폼에서 작동하는 소프트웨어 구성요소가 통신할 수 있도록 함."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": "🔪 : (OSI model)",
    "description": ["Open Systems Interconnection model"],
    "children": [
      {
        "word_name": ": 7 application layer",
        "description": [],
        "children": [
          {
            "word_name": ": Message Queue Telemetry Transport (MQTT)",
            "description": [
              "메시지 큐와 발행-구독 패턴을 사용하는 경량 M2M 네트워크 프로토콜.",
              "리소스 제약과 대역폭 제한이 있는 장치들 간의 원격 연결을 위해 디자인되었으며, TCP/IP 와 같은 무손실 양방향 연결을 제공하는 전송 프로토콜을 통해 실행되어야 함."
            ],
            "children": []
          }
        ]
      },
      {
        "word_name": ": 5 session layer",
        "description": [],
        "children": [
          {
            "word_name": ": network socket",
            "description": [
              "네트워크간 데이터 송수신을 위한 엔드포인트 역할을 하는, 컴퓨터 네트워크 노드에서의 소프트웨어 구조.",
              "기장 많이 사용되는 internet socket 은 socket address 에 의해 외부의 다른 호스트에 의해 식별되며, socket address 은 (전송 프로토콜, IP 주소, 포트 번호)로 구성됨."
            ],
            "children": []
          }
        ]
      }
    ]
  },
  {
    "word_name": ": Cloud computing",
    "description": [
      "데이터 스토리지나 컴퓨팅 파워와 같은 시스템 리소스를 사용자의 직접적인 관리 없이 온디맨드 방식으로 사용할 수 있는 가용성.",
      "데이터 사용에 대한 지불정책은 컨테이너의 대중화 이후 등장한 Pay-as-you-use 모델을 많이 채용중에 있음."
    ],
    "children": [
      {
        "word_name": ": Pay-as-you-use",
        "description": [
          "클라우드 컴퓨팅에서 지불 모델 중 하나로, 사용한 만큼 지불하는 모델을 의미함.",
          "할당된 리소스 중에서 사용하지 않는 리소스에 요금을 부과하지 않는다는 점에서 Pay-as-you-go 지불모델과 차이를 보이며",
          ", 예약되었지만 소비되지 않는 리소스의 낭비가 없기 때문에 회사 입장에서도 손실을 줄일 수 있음."
        ],
        "children": []
      },
      {
        "word_name": ": Provisioning",
        "description": [
          "사용자에게 새로운 서비스를 제공할 수 있도록 네트워크를 공급하고 준비하는 프로세스."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": ": Graphics",
    "description": [],
    "children": [
      {
        "word_name": ": color depth",
        "description": [
          "색 깊이는 크게 High color, True color, Deep color 로 나눌 수 있음.",
          "🔪 High color: (15|16) bit 를 사용하며, 구성방식이 다양함.",
          "　➕ e.g.: (RGBA 4bit), (RGB 5 bit, unused 1 bit), (RB 5 bit, G 6bit)",
          "🔪 True color: (RGB 8 bit) 씩 24 bit 로 구성되며, 알파 채널을 위한 8 bit 를 추가로 넣어서 32 bit 로 구성되기도 함.",
          "🔪 Deep color: (RGB 10 bit) 씩 30 bit 로 구성되며, 알파 채널을 위한 10 bit 를 추가로 넣어서 40 bit 로 구성되기도 함."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": ": (SDLC)",
    "description": ["Software Development Life Cycle"],
    "children": [
      {
        "word_name": ": DevOps",
        "description": [
          " 소프트웨어 개발인 Dev 와 IT 운영인 Ops 의 합성어로, 시스템 개발주기를 단축시키고 높은 품질의 소프트웨어를 지속적으로 제공하는 것을 목표로 하는 소프트웨어 개발 관습의 모음."
        ],
        "children": [
          {
            "word_name": ": Plan",
            "description": [],
            "children": [
              {
                "word_name": "🆚: Functional Requirement, Non ... (NFR)",
                "description": [
                  "🔪 기능적 요구사항: 시스템이 무엇을 해야하는지를 정의하고, 비기능적 요구사항은 시스템이 어떻게 되어야 하는지를 정의함.",
                  "🔪 비기능적 요구사항: 주로 두 가지 범위로 나눌 수 있으며 하나는 런타임 동안 관찰가능한 보안, 유용성과 같은 실행 품질이고",
                  "　, 다른 하나는 시스템의 내장된 정적 구조에 포함되는 확장성, 유지보수 용이성과 같은 진화적 품질."
                ],
                "children": []
              }
            ]
          },
          {
            "word_name": ": Deployment",
            "description": [],
            "children": [
              {
                "word_name": "🆚: CI/CD",
                "description": [
                  "DevOps 의 중추를 담당하여, (결함의 조기발견하고, 생산성을 향상시키고, 더 빠른 배포 주기를 제공하는 것을) 목표로 하는 소프트웨어 개발 관습의 모음.",
                  "🔪 CI: Continuous integration 약자로, 개발자들이 자주 main 분기에 코드를 병합하여 자동화된 테스트와 빌드를 하는 것을 말함",
                  "　",
                  "🔪 CD: (Continuous delivery  |  Continuous deployment) 의 약자로, 보통 Continuous delivery 로서 더 자주 사용됨.",
                  "　Continuous delivery 는 Production 과 유사한 환경을 위한 일련의 작업을 통해 신뢰가능한 소프트웨어를 아무 때나 릴리즈할 수 있도록 하는 프로세스를 자동화하는 접근법.",
                  "　➖ main difference: Continuous delivery 는 배포가능한 것으로 간주되지만 실제로 최종 사용자에게 배포하지 않고, Continuous deploy 는 이 최종 사용자에게의 배포까지 자동화한다는 점에서 다름."
                ],
                "children": [
                  {
                    "word_name": ": GitHub actions",
                    "description": [
                      "이벤트 기반 CI/CD 플랫폼으로, GitHub Actions 은 workflow, event, jobs, actions, runner 로 구성됨.",
                      "🔪 workflow: 구성가능한 자동화된 프로세스로, 하나 이상의 job 을 실행하며, 프로젝트 루트 디렉토리의 .github/workflows 디렉토리 안에 .yml 파일로 정의됨.",
                      "　",
                      "🔪 event: workflow 를 트리거하는 특정 활동으로 예를 들어 pull request, push, issue open 이 존재함.",
                      "　",
                      "🔪 Job: workflow 에서 1개 이상의 step 으로 구성되며 하나의 job 은 동일한 러너에서 실행됨.",
                      "　각각의 step 은 shell script 또는 Action 이 될 수 있으며, 순서대로 실행되며어 각각의 스텝에서의 발생한 데이터를 공유할 수 있음.",
                      "　Job 간에는 종속성을 설정할 수 있으며 기본적으로 병렬로 실행됨",
                      "　✖️ e.g. when required dependencies: 각각의 코드를 빌드하고, 이들을 패키징 하는 경우.",
                      "🔪 Action: 복잡하거나 반복적인 작업을 위한 재사용 가능한 사용자 정의 어플리케이션.",
                      "　",
                      "🔪 Runner: workflow 가 실행되는 환경으로 각각의 runner 는 한 번에 하나의 job 만 실행가능함",
                      "　",
                      "　Github 는 Ubuntu, Window, MacOS 와 같은 runner 를 기본적으로 제공하며 사용자가 runner 를 직접 정의하여 사용할 수 있음."
                    ],
                    "children": []
                  }
                ]
              },
              {
                "word_name": ": Software Distribution",
                "description": [
                  "최종 사용자에게 소프트웨어 제품을 전달하는 과정.",
                  "🔪 distro: 있는 그대로 사용할 수 있도록 빌드, 조립되고 환경설정이 된 소프트웨어 컴포넌트 모음."
                ],
                "children": []
              },
              {
                "word_name": ": Multi-tenancy",
                "description": [
                  "서버 위에서 실행되고 있는 단일 소프트웨어 인스턴스를 다중 Tenant 에게 서비스를 제공하는 소프트웨어 아키텍쳐.",
                  "Tenant 란 소프트웨어 인스턴스에 대해 특정한 공용 접근 권한을 공유하는 사용자들의 그룹."
                ],
                "children": []
              }
            ]
          },
          {
            "word_name": ": Testing",
            "description": [],
            "children": [
              {
                "word_name": ": Verification and Validation (V&V)",
                "description": [
                  "🔪 Validation: (제품, 서비스, 시스템) 이 고객과 이해당사자의 요구사항을 충족하는지 확인하는 것으로 수용성과 적합성을 나타냄",
                  "🔪 Verification (제품, 서비스, 시스템) 이 규정, 사양, 그리고 부과된 조건을 따르는지에 대한 평가로, 종종 내부 프로세스에서 이용됩."
                ],
                "children": []
              }
            ]
          }
        ]
      },
      {
        "word_name": ": Frontend and backend",
        "description": [
          "소프트웨어에서 표현 계층과 데이터 접근 계층 사이의 관심사 분리를 나타내는 용어."
        ],
        "children": []
      }
    ]
  },
  {
    "word_name": ": <Python>",
    "description": [],
    "children": [
      {
        "word_name": ": dunders name",
        "description": [
          "앞뒤로 2 개의 underscore (_) 가 붙은 이름.",
          "✖️ e.g. of dunders method: __init__, __iter__, __next__ of object."
        ],
        "children": [
          {
            "word_name": "🆚: object.__repr__(self), object.__str__(self).",
            "description": [
              "🔪 __repr__: 객체의 공식적인 문자열을 표현하기 사용되는 함수로, 가능하다면 동일한 값을 가진 객체를 재생성하는 데 사용할 수 있는 유효한 파이썬 표현이여야 함.",
              "　전형적으로 디버깅을 위해 사용되어 모호하지 않고 정보가 풍부한 것이 중요.",
              "　만약 __str__ 이 정의되지 않았다면 대신 사용되며, 내장 함수 repr 을 사용하여 값을 리턴받을 수 있음.",
              "　",
              "🔪 __str__: __repr__ 과 비슷하지만 유효한 파이썬 표현일 필요는 없기 때문에 간단히 사용자가 보기 쉬운 형태로 문자열을 출력할 때 사용됨."
            ],
            "children": []
          },
          {
            "word_name": "🆚: object.__getattr__(self, name), object.__getattribute__(self, name).",
            "description": [
              "🔪 __getattr__: 객체에 __getattr__ 만 존재할 때, 객체의 속성에 대한 접근 시 AttributeError 가 발생되면 호출됨.",
              "🔪 __getattribute__: 만약 __getattr__ 이 있어도 __getattribute__ 이 정의되어 있다면, 항상 __getattribute__ 이 먼저 호출됨.",
              "　이 함수 안에서 명시적으로 base class method 인 object.__getattr__() 을 호출하거나 AttributeError 를 발생시키지 않으면 __getattr__() 은 호출되지 않음.",
              "　",
              "📝 __getitem__() : '객체'에 대한 subscription 표현식의 평가를 하는 함수. '클래스'에 대한 함수는 __class_getitem__() 으로 개별적으로 존재함."
            ],
            "children": []
          },
          {
            "word_name": "🆚: Iterable, Iterator, Generator.",
            "description": [
              "🔪 Iterable: 한 번에 하나씩 멤버를 반환할 수 있는 객체로, 파이썬에서는 (__iter__()  |  __getitem__()) 메서드를 가지고 있는 객체를 말함.",
              "　단 __getitem__ 만 가지고있는 Iterable 은 isinstance 를 사용할 때에는 iter로 감싸주어야 Iterable 로 인식함.",
              "　Iterable 은 (for-in 루프문 | sequence) 가 필요한 곳에서 이용될 수 있음.",
              "　",
              "🔪 Iterator: 컨테이너를 순회하는 객체로, 파이썬에서는 Iterable 을 상속받고 __next__() method 가 믹스인한 클래스.",
              "　✖️ iterator constructor: iterator protocol 을 형성하기 위한 (__iter__(), __next__()) 를 구현하거나, iter() 메소드에 iterable 객체를 전달하여 Iterator 로 생성 가능.",
              "　➖ in for-loop statement",
              "　　for 문은 원래 iterator 가 필요한데, for 문에서 iterable 을 사용하면 자동적으로 파이썬이 iter() 를 호출하여, for 루프 동안 이름없는 iterator 만들어서 유효하도록 내부적으로 처리함.",
              "　　( __next__ |  next() ) 를 사용하여 iterator 의 다음 아이템을 얻을 수 있으며, 더 이상 사용가능한 아이템이 존재하지 않으면 StopIteration 예외를 발생시킴.",
              "　　이는 일반적으로 (for loop | 내장함수 next()) 에서 암시적으로 호출됨.",
              "　",
              "🔪 Generator: 루프에서 iteration 동작을 제어하 데 사용될 수 있는 루틴.",
              "　generator 는 semi-coroutine 이라고도 불리며 coroutine 과 차이점은, generator 는 점프 할 다른 coroutine 을 지정하지 못하고 항상 호출자에게만 제어가 돌아감.",
              "　",
              "　파이썬에서는 Iterator 을 상속받고, send, throw, close 메소드를 믹스인한 클래스",
              "　✖️ generator constructor: yield 키워드가 있는 함수를 정의하거나 generator expression 을 사용해 생성할 수 있음.."
            ],
            "children": []
          }
        ]
      }
    ]
  }
]
