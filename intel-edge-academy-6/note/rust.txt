🖇️⚓ Intrudciton ; https://doc.rust-lang.org/reference/introduction.html 📅 2024-08-12 13:26:45
🖇️⚓ Foreword ; https://doc.rust-lang.org/book/foreword.html  📅 2024-08-12 13:26:45

⚓ 1. Notation ; https://doc.rust-lang.org/reference/notation.html
# 2. Lexical structure
  ⚓ 2.1. Input format ; https://doc.rust-lang.org/reference/input-format.html  
  ⚓ 2.2. Keywords ; https://doc.rust-lang.org/reference/keywords.html  
  ⚓ 2.3. Identifiers ; https://doc.rust-lang.org/reference/identifiers.html  
  ⚓ 2.4. Comments ; https://doc.rust-lang.org/reference/comments.html  
  ⚓ 2.5. Whitespace ; https://doc.rust-lang.org/reference/whitespace.html  
  ⚓ 2.6. Tokens ; https://doc.rust-lang.org/reference/tokens.html

⚓ 3. Macros ; https://doc.rust-lang.org/reference/macros.html
  ⚓ 3.1. Macros By Example ; https://doc.rust-lang.org/reference/macros-by-example.html  
  ⚓ 3.2. Procedural Macros ; https://doc.rust-lang.org/reference/procedural-macros.html

⚓ 4. Crates and source files ; https://doc.rust-lang.org/reference/crates-and-source-files.html

⚓ 5. Conditional compilation ; https://doc.rust-lang.org/reference/conditional-compilation.html

⚓ 6. Items ; https://doc.rust-lang.org/reference/macros.html
  ⚓ 6.1. Modules ; https://doc.rust-lang.org/reference/modules.html  
  ⚓ 6.2. Extern crates ; https://doc.rust-lang.org/reference/extern-crates.html  
  ⚓ 6.3. Use declarations ; https://doc.rust-lang.org/reference/use-declarations.html  
  ⚓ 6.4. Functions ; https://doc.rust-lang.org/reference/functions.html  
  ⚓ 6.5. Type aliases ; https://doc.rust-lang.org/reference/type-aliases.html  
  ⚓ 6.6. Structs ; https://doc.rust-lang.org/reference/structs.html  
  ⚓ 6.7. Enumerations ; https://doc.rust-lang.org/reference/enumerations.html  
  ⚓ 6.8. Unions ; https://doc.rust-lang.org/reference/unions.html  
  ⚓ 6.9. Constant items ; https://doc.rust-lang.org/reference/constant-items.html  
  ⚓ 6.10. Static items ; https://doc.rust-lang.org/reference/static-items.html  
  ⚓ 6.11. Traits ; https://doc.rust-lang.org/reference/traits.html  
  ⚓ 6.12. Implementations ; https://doc.rust-lang.org/reference/implementations.html  
  ⚓ 6.13. External blocks ; https://doc.rust-lang.org/reference/external-blocks.html  
  ⚓ 6.14. Generic parameters ; https://doc.rust-lang.org/reference/generic-parameters.html  
  ⚓ 6.15. Associated Items ; https://doc.rust-lang.org/reference/associated-items.html

⚓ 7. Attributes ; https://doc.rust-lang.org/reference/macros.html
  ⚓ 7.1. Testing ; https://doc.rust-lang.org/reference/testing.html  
  ⚓ 7.2. Derive ; https://doc.rust-lang.org/reference/derive.html  
  ⚓ 7.3. Diagnostics ; https://doc.rust-lang.org/reference/diagnostics.html  
  ⚓ 7.4. Code generation ; https://doc.rust-lang.org/reference/code-generation.html  
  ⚓ 7.5. Limits ; https://doc.rust-lang.org/reference/limits.html  
  ⚓ 7.6. Type System ; https://doc.rust-lang.org/reference/type-system.html  
  ⚓ 7.7. Debugger ; https://doc.rust-lang.org/reference/debugger.html

⚓ 8. Statements and expressions ; https://doc.rust-lang.org/reference/statements-and-expressions.html
  ⚓ 8.1. Statements ; https://doc.rust-lang.org/reference/statements.html  
  ⚓ 8.2. Expressions ; https://doc.rust-lang.org/reference/expressions.html  
    ⚓ 8.2.1. Literal expressions ; https://doc.rust-lang.org/reference/literal-expressions.html  
    ⚓ 8.2.2. Path expressions ; https://doc.rust-lang.org/reference/path-expressions.html  
    ⚓ 8.2.3. Block expressions ; https://doc.rust-lang.org/reference/block-expressions.html  
    ⚓ 8.2.4. Operator expressions ; https://doc.rust-lang.org/reference/operator-expressions.html  
    ⚓ 8.2.5. Grouped expressions ; https://doc.rust-lang.org/reference/grouped-expressions.html  
    ⚓ 8.2.6. Array and index expressions ; https://doc.rust-lang.org/reference/array-and-index-expressions.html  
    ⚓ 8.2.7. Tuple and index expressions ; https://doc.rust-lang.org/reference/tuple-and-index-expressions.html  
    ⚓ 8.2.8. Struct expressions ; https://doc.rust-lang.org/reference/struct-expressions.html  
    ⚓ 8.2.9. Call expressions ; https://doc.rust-lang.org/reference/call-expressions.html  
    ⚓ 8.2.10. Method call expressions ; https://doc.rust-lang.org/reference/method-call-expressions.html  
    ⚓ 8.2.11. Field access expressions ; https://doc.rust-lang.org/reference/field-access-expressions.html  
    ⚓ 8.2.12. Closure expressions ; https://doc.rust-lang.org/reference/closure-expressions.html  
    ⚓ 8.2.13. Loop expressions ; https://doc.rust-lang.org/reference/loop-expressions.html  
    ⚓ 8.2.14. Range expressions ; https://doc.rust-lang.org/reference/range-expressions.html  
    ⚓ 8.2.15. If and if let expressions ; https://doc.rust-lang.org/reference/if-and-if-let-expressions.html  
    ⚓ 8.2.16. Match expressions ; https://doc.rust-lang.org/reference/match-expressions.html  
    ⚓ 8.2.17. Return expressions ; https://doc.rust-lang.org/reference/return-expressions.html  
    ⚓ 8.2.18. Await expressions ; https://doc.rust-lang.org/reference/await-expressions.html  
    ⚓ 8.2.19. Underscore expressions ; https://doc.rust-lang.org/reference/underscore-expressions.html

⚓ 9. Patterns ; https://doc.rust-lang.org/reference/patterns.html

# 10. Type system
  ⚓ 10.1. Types ; https://doc.rust-lang.org/reference/types.html  
    ⚓ 10.1.1. Boolean type ; https://doc.rust-lang.org/reference/boolean-type.html  
    ⚓ 10.1.2. Numeric types ; https://doc.rust-lang.org/reference/numeric-types.html  
    ⚓ 10.1.3. Textual types ; https://doc.rust-lang.org/reference/textual-types.html  
    ⚓ 10.1.4. Never type ; https://doc.rust-lang.org/reference/never-type.html  
    ⚓ 10.1.5. Tuple types ; https://doc.rust-lang.org/reference/tuple-types.html  
    ⚓ 10.1.6. Array types ; https://doc.rust-lang.org/reference/array-types.html  
    ⚓ 10.1.7. Slice types ; https://doc.rust-lang.org/reference/slice-types.html  
    ⚓ 10.1.8. Struct types ; https://doc.rust-lang.org/reference/struct-types.html  
    ⚓ 10.1.9. Enumerated types ; https://doc.rust-lang.org/reference/enumerated-types.html  
    ⚓ 10.1.10. Union types ; https://doc.rust-lang.org/reference/union-types.html  
    ⚓ 10.1.11. Function item types ; https://doc.rust-lang.org/reference/function-item-types.html  
    ⚓ 10.1.12. Closure types ; https://doc.rust-lang.org/reference/closure-types.html  
    ⚓ 10.1.13. Pointer types ; https://doc.rust-lang.org/reference/pointer-types.html  
    ⚓ 10.1.14. Function pointer types ; https://doc.rust-lang.org/reference/function-pointer-types.html  
    ⚓ 10.1.15. Trait object types ; https://doc.rust-lang.org/reference/trait-object-types.html  
    ⚓ 10.1.16. Impl trait type ; https://doc.rust-lang.org/reference/impl-trait-type.html  
    ⚓ 10.1.17. Type parameters ; https://doc.rust-lang.org/reference/type-parameters.html  
    ⚓ 10.1.18. Inferred type ; https://doc.rust-lang.org/reference/inferred-type.html  
  ⚓ 10.2. Dynamically Sized Types ; https://doc.rust-lang.org/reference/dynamically-sized-types.html  
  ⚓ 10.3. Type layout ; https://doc.rust-lang.org/reference/type-layout.html  
  ⚓ 10.4. Interior mutability ; https://doc.rust-lang.org/reference/interior-mutability.html  
  ⚓ 10.5. Subtyping and Variance ; https://doc.rust-lang.org/reference/subtyping-and-variance.html  
  ⚓ 10.6. Trait and lifetime bounds ; https://doc.rust-lang.org/reference/trait-and-lifetime-bounds.html  
  ⚓ 10.7. Type coercions ; https://doc.rust-lang.org/reference/type-coercions.html  
  ⚓ 10.8. Destructors ; https://doc.rust-lang.org/reference/destructors.html  
  ⚓ 10.9. Lifetime elision ; https://doc.rust-lang.org/reference/lifetime-elision.html

⚓ 11. Special types and traits ; https://doc.rust-lang.org/reference/special-types-and-traits.html

⚓ 12. Names ; https://doc.rust-lang.org/reference/names.html
  ⚓ 12.1. Namespaces ; https://doc.rust-lang.org/reference/namespaces.html  
  ⚓ 12.2. Scopes ; https://doc.rust-lang.org/reference/scopes.html  
  ⚓ 12.3. Preludes ; https://doc.rust-lang.org/reference/preludes.html  
  ⚓ 12.4. Paths ; https://doc.rust-lang.org/reference/paths.html  
  ⚓ 12.5. Name resolution ; https://doc.rust-lang.org/reference/name-resolution.html  
  ⚓ 12.6. Visibility and privacy ; https://doc.rust-lang.org/reference/visibility-and-privacy.html

⚓ 13. Memory model ; https://doc.rust-lang.org/reference/memory-model.html
  ⚓ 13.1. Memory allocation and lifetime ; https://doc.rust-lang.org/reference/memory-allocation-and-lifetime.html  
  ⚓ 13.2. Variables ; https://doc.rust-lang.org/reference/variables.html

⚓ 14. Linkage ; https://doc.rust-lang.org/reference/linkage.html

⚓ 15. Inline assembly ; https://doc.rust-lang.org/reference/inline-assembly.html

⚓ 16. Unsafety ; https://doc.rust-lang.org/reference/unsafety.html
  ⚓ 16.1. The unsafe keyword ; https://doc.rust-lang.org/reference/the-unsafe-keyword.html  
  ⚓ 16.2. Behavior considered undefined ; https://doc.rust-lang.org/reference/behavior-considered-undefined.html  
  ⚓ 16.3. Behavior not considered unsafe ; https://doc.rust-lang.org/reference/behavior-not-considered-unsafe.html

⚓ 17. Constant Evaluation ; https://doc.rust-lang.org/reference/constant-evaluation.html

⚓ 18. Application Binary Interface ; https://doc.rust-lang.org/reference/application-binary-interface.html

⚓ 19. The Rust runtime ; https://doc.rust-lang.org/reference/the-rust-runtime.html

# 20. Appendices  
  ⚓ 20.1. Macro Follow-Set Ambiguity Formal Specification ; https://doc.rust-lang.org/reference/macro-follow-set-ambiguity-formal-specification.html  
  ⚓ 20.2. Influences ; https://doc.rust-lang.org/reference/influences.html  
  ⚓ 20.3. Glossary ; https://doc.rust-lang.org/reference/glossary.html


settings 
  in WSL
    📦 Rust ; https://www.rust-lang.org/tools/install
      %shell> curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    📦 https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer
      >>> Output
        Welcome to Rust!

        This will download and install the official compiler for the Rust
        programming language, and its package manager, Cargo.

        Rustup metadata and toolchains will be installed into the Rustup
        home directory, located at:

          /home/wbfw109v2/.rustup

        This can be modified with the RUSTUP_HOME environment variable.

        The Cargo home directory is located at:

          /home/wbfw109v2/.cargo

        This can be modified with the CARGO_HOME environment variable.

        The cargo, rustc, rustup and other commands will be added to
        Cargo's bin directory, located at:

          /home/wbfw109v2/.cargo/bin

        This path will then be added to your PATH environment variable by
        modifying the profile files located at:

          /home/wbfw109v2/.profile
          /home/wbfw109v2/.bashrc

        You can uninstall at any time with rustup self uninstall and
        these changes will be reverted.

        Current installation options:


          default host triple: x86_64-unknown-linux-gnu
            default toolchain: stable (default)
                      profile: default
          modify PATH variable: yes
